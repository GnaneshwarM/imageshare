{"ast":null,"code":"import _classCallCheck from \"/Users/gnani/Documents/image-sharing-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gnani/Documents/image-sharing-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gnani/Documents/image-sharing-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gnani/Documents/image-sharing-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gnani/Documents/image-sharing-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gnani/Documents/image-sharing-app/src/components/NewComment.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\n\nvar Comments =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Comments, _Component);\n\n  function Comments() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Comments);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Comments)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      newComment: ''\n    };\n\n    _this.handleChange = function (e) {\n      _this.setState({\n        newComment: e.target.value\n      });\n\n      $(e.target).keydown(function (e) {\n        if (e.which === 13) {\n          e.preventDefault();\n          $(e.target).siblings('.commentPost').click();\n        }\n      });\n    };\n\n    _this.handleCommentPost = function () {\n      var newComment = _this.state.newComment;\n      var _this$props = _this.props,\n          currentUser = _this$props.currentUser,\n          postid = _this$props.postid,\n          allComments = _this$props.allComments,\n          updateComments = _this$props.updateComments;\n      allComments.some(function (commentObj) {\n        if (commentObj.postid === postid) {\n          commentObj.comments.push({\n            'authorid': currentUser.id,\n            'text': newComment\n          });\n          return true;\n        }\n\n        return false;\n      });\n      updateComments(allComments);\n\n      _this.setState({\n        newComment: ''\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Comments, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n      return React.createElement(\"p\", {\n        className: \"new-comment-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: currentUser.avatar,\n        alt: \"avatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"comment\",\n        value: this.state.newComment,\n        placeholder: \"add a comment\",\n        onChange: function onChange(e) {\n          return _this2.handleChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"commentPost\",\n        onClick: function onClick(e) {\n          return _this2.handleCommentPost();\n        },\n        disabled: this.state.newComment === '' ? 'disabled' : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Post\"));\n    }\n  }]);\n\n  return Comments;\n}(Component);\n\nexport default Comments;","map":{"version":3,"sources":["/Users/gnani/Documents/image-sharing-app/src/components/NewComment.js"],"names":["React","Component","$","Comments","state","newComment","handleChange","e","setState","target","value","keydown","which","preventDefault","siblings","click","handleCommentPost","props","currentUser","postid","allComments","updateComments","some","commentObj","comments","push","id","avatar"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,OAAOC,CAAP,MAAc,QAAd;;IAGMC,Q;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,UAAU,EAAC;AADP,K;;UAORC,Y,GAAe,UAACC,CAAD,EAAO;AAClB,YAAKC,QAAL,CAAc;AAACH,QAAAA,UAAU,EAACE,CAAC,CAACE,MAAF,CAASC;AAArB,OAAd;;AACAR,MAAAA,CAAC,CAACK,CAAC,CAACE,MAAH,CAAD,CAAYE,OAAZ,CAAoB,UAASJ,CAAT,EAAW;AACvB,YAAIA,CAAC,CAACK,KAAF,KAAY,EAAhB,EAAoB;AAChBL,UAAAA,CAAC,CAACM,cAAF;AACAX,UAAAA,CAAC,CAACK,CAAC,CAACE,MAAH,CAAD,CAAYK,QAAZ,CAAqB,cAArB,EAAqCC,KAArC;AACH;AACJ,OALL;AAMH,K;;UAEDC,iB,GAAoB,YAAM;AAAA,UACfX,UADe,GACD,MAAKD,KADJ,CACfC,UADe;AAAA,wBAEqC,MAAKY,KAF1C;AAAA,UAEfC,WAFe,eAEfA,WAFe;AAAA,UAEFC,MAFE,eAEFA,MAFE;AAAA,UAEMC,WAFN,eAEMA,WAFN;AAAA,UAEmBC,cAFnB,eAEmBA,cAFnB;AAGtBD,MAAAA,WAAW,CAACE,IAAZ,CAAiB,UAACC,UAAD,EAAgB;AAC7B,YAAGA,UAAU,CAACJ,MAAX,KAAsBA,MAAzB,EAAgC;AAC5BI,UAAAA,UAAU,CAACC,QAAX,CAAoBC,IAApB,CAAyB;AACrB,wBAAYP,WAAW,CAACQ,EADH;AAErB,oBAAQrB;AAFa,WAAzB;AAIA,iBAAO,IAAP;AACH;;AACD,eAAO,KAAP;AACH,OATD;AAUAgB,MAAAA,cAAc,CAACD,WAAD,CAAd;;AACA,YAAKZ,QAAL,CAAc;AAACH,QAAAA,UAAU,EAAC;AAAZ,OAAd;AACH,K;;;;;;;wCA7BkB,CAElB;;;6BA6BO;AAAA;;AAAA,UACGa,WADH,GACkB,KAAKD,KADvB,CACGC,WADH;AAEJ,aACY;AAAG,QAAA,SAAS,EAAE,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,GAAG,EAAEA,WAAW,CAACS,MAAtB;AAA8B,QAAA,GAAG,EAAC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,SAAxB;AAAkC,QAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWC,UAApD;AAAgE,QAAA,WAAW,EAAC,eAA5E;AAA4F,QAAA,QAAQ,EAAI,kBAACE,CAAD;AAAA,iBAAO,MAAI,CAACD,YAAL,CAAkBC,CAAlB,CAAP;AAAA,SAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAE,iBAACA,CAAD;AAAA,iBAAO,MAAI,CAACS,iBAAL,EAAP;AAAA,SAAzC;AAA0E,QAAA,QAAQ,EAAG,KAAKZ,KAAL,CAAWC,UAAX,KAA0B,EAA3B,GAAiC,UAAjC,GAA8C,KAAlI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADZ;AAQH;;;;EA7CkBJ,S;;AAgDvB,eAAeE,QAAf","sourcesContent":["import React,{ Component } from 'react';\nimport $ from 'jquery';\n\n\nclass Comments extends Component {\n    state = {\n        newComment:'',\n    }\n    componentDidMount(){\n\n    }\n\n    handleChange = (e) => {\n        this.setState({newComment:e.target.value});\n        $(e.target).keydown(function(e){\n                if (e.which === 13) {\n                    e.preventDefault();\n                    $(e.target).siblings('.commentPost').click();\n                }\n            });\n    }\n\n    handleCommentPost = () => {\n        const {newComment} = this.state;\n        const {currentUser, postid, allComments, updateComments} = this.props;\n        allComments.some((commentObj) => {\n            if(commentObj.postid === postid){\n                commentObj.comments.push({\n                    'authorid': currentUser.id,\n                    'text': newComment\n                });\n                return true;\n            }\n            return false;\n        });\n        updateComments(allComments);\n        this.setState({newComment:''});\n    }\n\n    render(){\n        const {currentUser} = this.props;\n        return (\n                    <p className =\"new-comment-box\">\n                        <img src={currentUser.avatar} alt='avatar'></img>\n                        <input type=\"text\" name=\"comment\" value={this.state.newComment} placeholder=\"add a comment\" onChange = {(e) => this.handleChange(e)}/>\n                        <button className=\"commentPost\" onClick={(e) => this.handleCommentPost()} disabled={(this.state.newComment === '') ? 'disabled' : false}>Post</button>\n                    </p>\n        );\n\n    }\n}\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}