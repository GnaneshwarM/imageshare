{"ast":null,"code":"import _objectSpread from \"/usr/local/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/usr/local/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/usr/local/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/usr/local/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/usr/local/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gnani/Documents/image-sharing-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { setUsers, setCurrentUser, setPosts, setallComments, setSorting } from '../Actions';\nimport Profile from './Profile.js';\nimport Home from './Home.js';\nimport Photo from './Photo';\nimport Login from './Login.js';\nimport Comments from './Comments';\nvar DefaultAvatar = 'https://i.postimg.cc/FHh1RDbt/128px-Creative-Tail-Animal-kangoroo-svg.png';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.loadData = function () {\n      //const {users,posts, allComments} = this.state;\n      var _this$props$store$get = _this.props.store.getState(),\n          users = _this$props$store$get.users,\n          posts = _this$props$store$get.posts,\n          allComments = _this$props$store$get.allComments;\n\n      var user;\n      var singlePost;\n      var postComments;\n      var url = \"https://www.mocky.io/v2/5c14f7d73400005c1cb8e985\"; //fetch data from foursquare\n\n      fetch(url).then(function (response) {\n        response.json().then(function (data) {\n          if (response.status === 200) {\n            data.forEach(function (item, i) {\n              user = {\n                id: item.id,\n                name: item.name,\n                following: item.following,\n                followers: item.followers,\n                avatar: item.avatar ? item.avatar : DefaultAvatar\n              };\n              user['liked'] = [];\n              user['followersids'] = [];\n              user['followingids'] = [];\n              item.posts.forEach(function (post, i) {\n                singlePost = {\n                  id: post.id,\n                  userid: item.id,\n                  likes: post.likes,\n                  timestamp: post.timestamp,\n                  imageUrl: post.imageUrl\n                };\n                posts.push(singlePost);\n                postComments = {\n                  postid: post.id,\n                  comments: post.comments ? post.comments : []\n                };\n                allComments.push(postComments);\n              });\n              users.push(user);\n            });\n          } else {\n            console.log('Sorry, Unable to retrieve data from API');\n          } //this.setState({users,posts, allComments});\n\n\n          _this.store.dispatch(setUsers(users));\n\n          _this.store.dispatch(setPosts(posts));\n\n          _this.store.dispatch(setallComments(allComments));\n        }).catch(function (error) {\n          console.log('Call is Not Successful ' + error);\n        });\n      }).catch(function (error) {\n        console.log('API Not Responding' + error);\n      });\n    };\n\n    _this.updateSorting = function (sort) {\n      //this.setState({sorting: sort})\n      _this.store.dispatch(setSorting(sort));\n    };\n\n    _this.updateComments = function (comments) {\n      //this.setState({allComments : comments})\n      _this.store.dispatch(setallComments(comments));\n    };\n\n    _this.updateCurrentUser = function (userid) {\n      //const {users} = this.state;\n      var _this$store$getState = _this.store.getState(),\n          users = _this$store$getState.users;\n\n      var newUser;\n      users.forEach(function (user) {\n        if (user.id === userid) {\n          newUser = user;\n        }\n\n        return true;\n      }); //this.setState({currentUser:newUser})\n\n      _this.store.dispatch(setCurrentUser(newUser));\n    };\n\n    _this.followHandler = function (followingid) {\n      //const {users, currentUser} = this.state;\n      var _this$store$getState2 = _this.store.getState(),\n          users = _this$store$getState2.users,\n          currentUser = _this$store$getState2.currentUser;\n\n      var followersid = currentUser.id;\n      users.map(function (user) {\n        if (user.id === followersid) {\n          if (user.followingids.indexOf(followingid) < 0) {\n            user.following += 1;\n            user.followingids.push(followingid);\n          } else {\n            user.following -= 1;\n            user.followingids.splice(followingid, 1);\n          }\n        }\n\n        if (user.id === followingid) {\n          if (user.followersids.indexOf(followersid) < 0) {\n            user.followers += 1;\n            user.followersids.push(followersid);\n          } else {\n            user.followers -= 1;\n            user.followersids.splice(followersid, 1);\n          }\n        }\n\n        return true;\n      }); //this.setState({users});\n\n      _this.store.dispatch(setUsers(users));\n    };\n\n    _this.getUser = function (userid) {\n      //const {users} = this.state;\n      var _this$store$getState3 = _this.store.getState(),\n          users = _this$store$getState3.users;\n\n      var user;\n      users.some(function (u) {\n        if (u.id === userid) {\n          user = u;\n          return true;\n        }\n\n        return false;\n      });\n      return user;\n    };\n\n    _this.getComments = function (postid) {\n      //const{allComments} = this.state;\n      var _this$store$getState4 = _this.store.getState(),\n          allComments = _this$store$getState4.allComments;\n\n      var filteredComments;\n      allComments.some(function (commentObj) {\n        if (commentObj.postid === postid) {\n          filteredComments = commentObj.comments !== undefined ? commentObj.comments : [];\n          return true;\n        }\n\n        return false;\n      });\n      return filteredComments;\n    };\n\n    _this.deletePost = function (postid) {\n      //const {posts, allComments, currentUser} = this.state;\n      var _this$store$getState5 = _this.store.getState(),\n          posts = _this$store$getState5.posts,\n          allComments = _this$store$getState5.allComments,\n          currentUser = _this$store$getState5.currentUser;\n\n      posts.some(function (post, i) {\n        if (post.id === postid) {\n          if (post.userid === currentUser.id) {\n            posts.splice(i, 1);\n            allComments.some(function (postComments, j) {\n              if (postComments.postid === postid) {\n                allComments.splice(j, 1);\n                return true;\n              }\n\n              return null;\n            });\n            return true;\n          }\n        }\n\n        return null;\n      }); //this.setState({posts, allComments});\n\n      _this.store.dispatch(setallComments(allComments));\n\n      _this.store.dispatch(setPosts(posts));\n    };\n\n    _this.postLiker = function (postid) {\n      //const {posts, currentUser} = this.state;\n      var _this$store$getState6 = _this.store.getState(),\n          posts = _this$store$getState6.posts,\n          currentUser = _this$store$getState6.currentUser;\n\n      posts.some(function (post, i) {\n        if (post.id === postid) {\n          var Likedindex = currentUser.liked.indexOf(postid);\n\n          if (!(Likedindex >= 0)) {\n            post.likes += 1;\n            currentUser.liked.push(postid);\n            return null;\n          } else {\n            post.likes -= 1;\n            currentUser.liked.splice(Likedindex, 1);\n            return null;\n          }\n        }\n\n        return null;\n      }); //this.setState({posts});\n\n      _this.store.dispatch(setPosts(posts));\n    };\n\n    _this.sortPosts = function (sorting, posts) {\n      var sortedPosts;\n\n      if (sorting === 'timestamp') {\n        sortedPosts = posts.sort(function (obj1, obj2) {\n          return Date.parse(obj2[sorting]) - Date.parse(obj1[sorting]);\n        });\n      } else {\n        sortedPosts = posts.sort(function (obj1, obj2) {\n          return obj2[sorting] - obj1[sorting];\n        });\n      }\n\n      return sortedPosts;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    //state = {\n    //    currentUser: {},\n    //    users:[],\n    //    posts:[],\n    //    allComments:[],\n    //    sorting:'timestamp',\n    //}\n    value: function componentDidMount() {\n      this.loadData();\n      this.store = this.props.store;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //const {sorting, posts, users, currentUser, allComments} = this.state;\n      var _this$props$store$get2 = this.props.store.getState(),\n          sorting = _this$props$store$get2.sorting,\n          posts = _this$props$store$get2.posts,\n          users = _this$props$store$get2.users,\n          currentUser = _this$props$store$get2.currentUser,\n          allComments = _this$props$store$get2.allComments;\n\n      var sortedPosts = this.sortPosts(sorting, posts);\n      return /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/login\",\n          render: function render() {\n            return /*#__PURE__*/_jsxDEV(Login, {\n              users: users,\n              updateCurrentUser: _this2.updateCurrentUser,\n              currentUser: currentUser\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 21\n            }, _this2);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          render: function render() {\n            return /*#__PURE__*/_jsxDEV(Home, {\n              currentUser: currentUser,\n              posts: sortedPosts,\n              postLiker: _this2.postLiker,\n              deletePost: _this2.deletePost,\n              sorting: sorting,\n              sortPosts: _this2.sortPosts,\n              getUser: _this2.getUser,\n              followHandler: _this2.followHandler,\n              allComments: allComments,\n              updateComments: _this2.updateComments,\n              getComments: _this2.getComments\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 21\n            }, _this2);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/profile/:userid\",\n          render: function render(props) {\n            return /*#__PURE__*/_jsxDEV(Profile, _objectSpread(_objectSpread({}, props), {}, {\n              currentUser: currentUser,\n              getUser: _this2.getUser,\n              posts: sortedPosts,\n              sorting: sorting,\n              sortPosts: _this2.sortPosts,\n              deletePost: _this2.deletePost,\n              updateSorting: _this2.updateSorting,\n              postLiker: _this2.postLiker,\n              followHandler: _this2.followHandler\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 21\n            }, _this2);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/photo/:postid\",\n          render: function render(props) {\n            return /*#__PURE__*/_jsxDEV(Photo, _objectSpread(_objectSpread({}, props), {}, {\n              posts: sortedPosts,\n              currentUser: currentUser,\n              deletePost: _this2.deletePost,\n              postLiker: _this2.postLiker,\n              getUser: _this2.getUser,\n              followHandler: _this2.followHandler,\n              allComments: allComments,\n              updateComments: _this2.updateComments,\n              getComments: _this2.getComments\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 21\n            }, _this2);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/comments/:postid\",\n          render: function render(props) {\n            return /*#__PURE__*/_jsxDEV(Comments, _objectSpread(_objectSpread({}, props), {}, {\n              posts: sortedPosts,\n              currentUser: currentUser,\n              getUser: _this2.getUser,\n              allComments: allComments,\n              updateComments: _this2.updateComments,\n              getComments: _this2.getComments\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 21\n            }, _this2);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n          from: \"*\",\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/gnani/Documents/image-sharing-app/src/components/App.js"],"names":["React","Component","Route","Switch","Redirect","setUsers","setCurrentUser","setPosts","setallComments","setSorting","Profile","Home","Photo","Login","Comments","DefaultAvatar","App","loadData","props","store","getState","users","posts","allComments","user","singlePost","postComments","url","fetch","then","response","json","data","status","forEach","item","i","id","name","following","followers","avatar","post","userid","likes","timestamp","imageUrl","push","postid","comments","console","log","dispatch","catch","error","updateSorting","sort","updateComments","updateCurrentUser","newUser","followHandler","followingid","currentUser","followersid","map","followingids","indexOf","splice","followersids","getUser","some","u","getComments","filteredComments","commentObj","undefined","deletePost","j","postLiker","Likedindex","liked","sortPosts","sorting","sortedPosts","obj1","obj2","Date","parse"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport {setUsers, setCurrentUser, setPosts, setallComments, setSorting} from '../Actions';\nimport Profile from './Profile.js';\nimport Home from './Home.js';\nimport Photo from './Photo';\nimport Login from './Login.js';\nimport Comments from './Comments';\n\nvar DefaultAvatar = 'https://i.postimg.cc/FHh1RDbt/128px-Creative-Tail-Animal-kangoroo-svg.png';\n\n\n\nclass App extends Component {\n    //state = {\n    //    currentUser: {},\n    //    users:[],\n    //    posts:[],\n    //    allComments:[],\n    //    sorting:'timestamp',\n    //}\n\n    componentDidMount(){\n        this.loadData();\n        this.store = this.props.store;\n    }\n\n    loadData = () => {\n        //const {users,posts, allComments} = this.state;\n        const {users, posts, allComments} = this.props.store.getState();\n        let user;\n        let singlePost;\n        let postComments;\n        const url = `https://www.mocky.io/v2/5c14f7d73400005c1cb8e985`;\n\n        //fetch data from foursquare\n        fetch(url)\n        .then((response) => {\n            response.json().then((data) => {\n                if (response.status === 200) {\n                    data.forEach((item, i) => {\n                        user = {id:item.id, name:item.name, following:item.following, followers: item.followers, avatar: item.avatar ? item.avatar : DefaultAvatar}\n                        user['liked'] = [];\n                        user['followersids'] = [];\n                        user['followingids'] = [];\n                        item.posts.forEach((post, i) => {\n                            singlePost = {id:post.id, userid:item.id, likes: post.likes, timestamp: post.timestamp, imageUrl:post.imageUrl}\n                            posts.push(singlePost);\n                            postComments = {postid:post.id, comments:post.comments ? post.comments : []}\n                            allComments.push(postComments);\n                        });\n                        users.push(user);\n                    });\n                } else {\n                    console.log('Sorry, Unable to retrieve data from API');\n                }\n            //this.setState({users,posts, allComments});\n            this.store.dispatch(setUsers(users));\n            this.store.dispatch(setPosts(posts));\n            this.store.dispatch(setallComments(allComments));\n        }).catch((error) => {\n            console.log('Call is Not Successful '+error);\n        })\n      }).catch((error) => {\n            console.log('API Not Responding'+error)\n        });\n\n    }\n\n    updateSorting = (sort) => {\n        //this.setState({sorting: sort})\n        this.store.dispatch(setSorting(sort));\n    }\n\n    updateComments = (comments) => {\n        //this.setState({allComments : comments})\n        this.store.dispatch(setallComments(comments));\n    }\n\n    updateCurrentUser = (userid) => {\n        //const {users} = this.state;\n        const {users} = this.store.getState();\n        let newUser;\n        users.forEach((user)=>{\n            if(user.id === userid){\n                newUser = user;\n            }\n            return true;\n        });\n        //this.setState({currentUser:newUser})\n        this.store.dispatch(setCurrentUser(newUser));\n    }\n\n    followHandler = (followingid) => {\n        //const {users, currentUser} = this.state;\n        const {users, currentUser} = this.store.getState();\n        let followersid = currentUser.id;\n        users.map((user) => {\n            if(user.id === followersid){\n                if(user.followingids.indexOf(followingid) < 0){\n                    user.following += 1;\n                    user.followingids.push(followingid);\n                }else{\n                    user.following -= 1;\n                    user.followingids.splice(followingid,1);\n                }\n            }\n\n            if(user.id === followingid){\n                if(user.followersids.indexOf(followersid) < 0){\n                    user.followers += 1;\n                    user.followersids.push(followersid);\n                }else{\n                    user.followers -= 1;\n                    user.followersids.splice(followersid,1);\n                }\n            }\n            return true;\n        });\n        //this.setState({users});\n        this.store.dispatch(setUsers(users));\n    }\n\n    getUser = (userid) => {\n        //const {users} = this.state;\n        const {users} = this.store.getState();\n        let user;\n        users.some((u) => {\n            if(u.id === userid){\n                user = u;\n                return true;\n            }\n            return false;\n        });\n        return user;\n    }\n    getComments = (postid) => {\n        //const{allComments} = this.state;\n        const{allComments} = this.store.getState();\n        let filteredComments;\n        allComments.some((commentObj) => {\n            if(commentObj.postid === postid){\n                    filteredComments = commentObj.comments !== undefined ? commentObj.comments : [];\n                    return true;\n            }\n            return false;\n        })\n        return filteredComments;\n    }\n\n    deletePost = (postid) => {\n        //const {posts, allComments, currentUser} = this.state;\n        const {posts, allComments, currentUser} = this.store.getState();\n        posts.some((post, i) => {\n            if(post.id === postid){\n                if(post.userid === currentUser.id){\n                    posts.splice(i,1);\n                    allComments.some((postComments, j) => {\n                        if(postComments.postid === postid){\n                            allComments.splice(j,1);\n                            return true;\n                        }\n                        return null;\n                    });\n                    return true;\n                }\n            }\n            return null;\n        });\n        //this.setState({posts, allComments});\n        this.store.dispatch(setallComments(allComments));\n        this.store.dispatch(setPosts(posts));\n    }\n\n    postLiker = (postid) => {\n        //const {posts, currentUser} = this.state;\n        const {posts, currentUser} = this.store.getState();\n\n        posts.some((post, i) => {\n            if(post.id === postid){\n                let Likedindex = currentUser.liked.indexOf(postid)\n                if(!(Likedindex >= 0)){\n                    post.likes += 1;\n                    currentUser.liked.push(postid);\n                    return null;\n                }else{\n                    post.likes -= 1;\n                    currentUser.liked.splice(Likedindex, 1);\n                    return null;\n                }\n            }\n            return null;\n        });\n        //this.setState({posts});\n        this.store.dispatch(setPosts(posts));\n    }\n\n    sortPosts = (sorting, posts) => {\n        let sortedPosts;\n        if(sorting === 'timestamp'){\n            sortedPosts = posts.sort(function(obj1, obj2) {\n            \treturn Date.parse(obj2[sorting]) - Date.parse(obj1[sorting]);\n            });\n        } else{\n            sortedPosts = posts.sort(function(obj1, obj2) {\n            \treturn obj2[sorting] - obj1[sorting];\n            });\n        }\n        return sortedPosts;\n    }\n\n    render() {\n        //const {sorting, posts, users, currentUser, allComments} = this.state;\n        const {sorting, posts, users, currentUser, allComments} = this.props.store.getState();\n        let sortedPosts = this.sortPosts(sorting, posts);\n        return (\n            <Switch>\n                <Route exact path='/login' render={() => (\n                    <Login\n                        users = {users}\n                        updateCurrentUser = {this.updateCurrentUser}\n                        currentUser = {currentUser}\n                    />\n                )}/>\n                <Route exact path='/' render={() => (\n                    <Home\n                    currentUser = {currentUser}\n                    posts = {sortedPosts}\n                    postLiker = {this.postLiker}\n                    deletePost = {this.deletePost}\n                    sorting = {sorting}\n                    sortPosts = {this.sortPosts}\n                    getUser = {this.getUser}\n                    followHandler = {this.followHandler}\n                    allComments = {allComments}\n                    updateComments = {this.updateComments}\n                    getComments = {this.getComments}\n                    />\n                )}/>\n                <Route exact path='/profile/:userid' render={(props) => (\n                    <Profile\n                    {...props}\n                    currentUser = {currentUser}\n                    getUser = {this.getUser}\n                    posts = {sortedPosts}\n                    sorting = {sorting}\n                    sortPosts = {this.sortPosts}\n                    deletePost = {this.deletePost}\n                    updateSorting = {this.updateSorting}\n                    postLiker = {this.postLiker}\n                    followHandler = {this.followHandler}\n                    />\n                )}/>\n                <Route exact path='/photo/:postid' render={(props) => (\n                    <Photo\n                    {...props}\n                    posts = {sortedPosts}\n                    currentUser = {currentUser}\n                    deletePost = {this.deletePost}\n                    postLiker = {this.postLiker}\n                    getUser = {this.getUser}\n                    followHandler = {this.followHandler}\n                    allComments = {allComments}\n                    updateComments = {this.updateComments}\n                    getComments ={this.getComments}\n                    />\n                )}/>\n                <Route exact path='/comments/:postid' render={(props) => (\n                    <Comments\n                    {...props}\n                    posts = {sortedPosts}\n                    currentUser = {currentUser}\n                    getUser = {this.getUser}\n                    allComments = {allComments}\n                    updateComments = {this.updateComments}\n                    getComments = {this.getComments}\n                    />\n                )}/>\n                <Redirect from='*' to='/' />\n            </Switch>\n        );\n        }\n    }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}